/**
 * (c) Copyright 1993, 1994, Silicon Graphics, Inc.
 * ALL RIGHTS RESERVED
 * Permission to use, copy, modify, and distribute this software for
 * any purpose and without fee is hereby granted, provided that the above
 * copyright notice appear in all copies and that both the copyright notice
 * and this permission notice appear in supporting documentation, and that
 * the name of Silicon Graphics, Inc. not be used in advertising
 * or publicity pertaining to distribution of the software without specific,
 * written prior permission.
 *
 * THE MATERIAL EMBODIED ON THIS SOFTWARE IS PROVIDED TO YOU "AS-IS"
 * AND WITHOUT WARRANTY OF ANY KIND, EXPRESS, IMPLIED OR OTHERWISE,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY OR
 * FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL SILICON
 * GRAPHICS, INC.  BE LIABLE TO YOU OR ANYONE ELSE FOR ANY DIRECT,
 * SPECIAL, INCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY
 * KIND, OR ANY DAMAGES WHATSOEVER, INCLUDING WITHOUT LIMITATION,
 * LOSS OF PROFIT, LOSS OF USE, SAVINGS OR REVENUE, OR THE CLAIMS OF
 * THIRD PARTIES, WHETHER OR NOT SILICON GRAPHICS, INC.  HAS BEEN
 * ADVISED OF THE POSSIBILITY OF SUCH LOSS, HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, ARISING OUT OF OR IN CONNECTION WITH THE
 * POSSESSION, USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * US Government Users Restricted Rights
 * Use, duplication, or disclosure by the Government is subject to
 * restrictions set forth in FAR 52.227.19(c)(2) or subparagraph
 * (c)(1)(ii) of the Rights in Technical Data and Computer Software
 * clause at DFARS 252.227-7013 and/or in similar or successor
 * clauses in the FAR or the DOD or NASA FAR Supplement.
 * Unpublished-- rights reserved under the copyright laws of the
 * United States.  Contractor/manufacturer is Silicon Graphics,
 * Inc., 2011 N.  Shoreline Blvd., Mountain View, CA 94039-7311.
 *
 * Opengl.gl(TM) is a trademark of Silicon Graphics, Inc.
 */
/* *INDENT-OFF* */
public class Dolphin extends MovableObject {

  public Dolphin(Vec3D p) { 
    super(p); 
    Mass = 250.0;
    MaxVelocity = 20.0f;
    Behaviour.WanderJitter = 1.5;
    Behaviour.WanderRadius = 10;
    Behaviour.WanderDistance = 20;
    Behaviour.XenoWeight = 0.2;
    
    Species = 2;
    Carnivorous = true;
    Name = "Dolphin";
  }

float N001[] = {-0.005937 ,-0.101998 ,-0.994767};
float N002[] = {0.936780 ,-0.200803 ,0.286569};
float N003[] = {-0.233062 ,0.972058 ,0.028007};
float N005[] = {0.898117 ,0.360171 ,0.252315};
float N006[] = {-0.915437 ,0.348456 ,0.201378};
float N007[] = {0.602263 ,-0.777527 ,0.180920};
float N008[] = {-0.906912 ,-0.412015 ,0.088061};
float N012[] = {0.884408 ,-0.429417 ,-0.182821};
float N013[] = {0.921121 ,0.311084 ,-0.234016};
float N014[] = {0.382635 ,0.877882 ,-0.287948};
float N015[] = {-0.380046 ,0.888166 ,-0.258316};
float N016[] = {-0.891515 ,0.392238 ,-0.226607};
float N017[] = {-0.901419 ,-0.382002 ,-0.203763};
float N018[] = {-0.367225 ,-0.911091 ,-0.187243};
float N019[] = {0.339539 ,-0.924846 ,-0.171388};
float N020[] = {0.914706 ,-0.378617 ,-0.141290};
float N021[] = {0.950662 ,0.262713 ,-0.164994};
float N022[] = {0.546359 ,0.801460 ,-0.243218};
float N023[] = {-0.315796 ,0.917068 ,-0.243431};
float N024[] = {-0.825687 ,0.532277 ,-0.186875};
float N025[] = {-0.974763 ,-0.155232 ,-0.160435};
float N026[] = {-0.560596 ,-0.816658 ,-0.137119};
float N027[] = {0.380210 ,-0.910817 ,-0.160786};
float N028[] = {0.923772 ,-0.358322 ,-0.135093};
float N029[] = {0.951202 ,0.275053 ,-0.139859};
float N030[] = {0.686099 ,0.702548 ,-0.188932};
float N031[] = {-0.521865 ,0.826719 ,-0.210220};
float N032[] = {-0.923820 ,0.346739 ,-0.162258};
float N033[] = {-0.902095 ,-0.409995 ,-0.134646};
float N034[] = {-0.509115 ,-0.848498 ,-0.144404};
float N035[] = {0.456469 ,-0.880293 ,-0.129305};
float N036[] = {0.873401 ,-0.475489 ,-0.105266};
float N037[] = {0.970825 ,0.179861 ,-0.158584};
float N038[] = {0.675609 ,0.714187 ,-0.183004};
float N039[] = {-0.523574 ,0.830212 ,-0.191360};
float N040[] = {-0.958895 ,0.230808 ,-0.165071};
float N041[] = {-0.918285 ,-0.376803 ,-0.121542};
float N042[] = {-0.622467 ,-0.774167 ,-0.114888};
float N043[] = {0.404497 ,-0.908807 ,-0.102231};
float N044[] = {0.930538 ,-0.365155 ,-0.027588};
float N045[] = {0.921920 ,0.374157 ,-0.100345};
float N046[] = {0.507346 ,0.860739 ,0.041562};
float N047[] = {-0.394646 ,0.918815 ,-0.005730};
float N048[] = {-0.925411 ,0.373024 ,-0.066837};
float N049[] = {-0.945337 ,-0.322309 ,-0.049551};
float N050[] = {-0.660437 ,-0.750557 ,-0.022072};
float N051[] = {0.488835 ,-0.871950 ,-0.027261};
float N052[] = {0.902599 ,-0.421397 ,0.087969};
float N053[] = {0.938636 ,0.322606 ,0.122020};
float N054[] = {0.484605 ,0.871078 ,0.079878};
float N055[] = {-0.353607 ,0.931559 ,0.084619};
float N056[] = {-0.867759 ,0.478564 ,0.134054};
float N057[] = {-0.951583 ,-0.296030 ,0.082794};
float N058[] = {-0.672355 ,-0.730209 ,0.121384};
float N059[] = {0.528336 ,-0.842452 ,0.105525};
float N060[] = {0.786913 ,-0.564760 ,0.248627};
float N062[] = {0.622098 ,0.765230 ,0.165584};
float N063[] = {-0.631711 ,0.767816 ,0.106773};
float N064[] = {-0.687886 ,0.606351 ,0.398938};
float N065[] = {-0.946327 ,-0.281623 ,0.158598};
float N066[] = {-0.509549 ,-0.860437 ,0.002776};
float N067[] = {0.462594 ,-0.876692 ,0.131977};
float N071[] = {0.000000 ,1.000000 ,0.000000};
float N077[] = {-0.880770 ,0.461448 ,0.106351};
float N078[] = {-0.880770 ,0.461448 ,0.106351};
float N079[] = {-0.880770 ,0.461448 ,0.106351};
float N080[] = {-0.880770 ,0.461448 ,0.106351};
float N081[] = {-0.571197 ,0.816173 ,0.087152};
float N082[] = {-0.880770 ,0.461448 ,0.106351};
float N083[] = {-0.571197 ,0.816173 ,0.087152};
float N084[] = {-0.571197 ,0.816173 ,0.087152};
float N085[] = {-0.880770 ,0.461448 ,0.106351};
float N086[] = {-0.571197 ,0.816173 ,0.087152};
float N087[] = {-0.880770 ,0.461448 ,0.106351};
float N088[] = {-0.880770 ,0.461448 ,0.106351};
float N089[] = {-0.880770 ,0.461448 ,0.106351};
float N090[] = {-0.880770 ,0.461448 ,0.106351};
float N091[] = {0.000000 ,1.000000 ,0.000000};
float N092[] = {0.000000 ,1.000000 ,0.000000};
float N093[] = {0.000000 ,1.000000 ,0.000000};
float N094[] = {1.000000 ,0.000000 ,0.000000};
float N095[] = {-1.000000 ,0.000000 ,0.000000};
float N097[] = {-0.697296 ,0.702881 ,0.140491};
float N098[] = {0.918864 ,0.340821 ,0.198819};
float N099[] = {-0.932737 ,0.201195 ,0.299202};
float N100[] = {0.029517 ,0.981679 ,0.188244};
float N102[] = {0.813521 ,-0.204936 ,0.544229};
float N110[] = {-0.781480 ,-0.384779 ,0.491155};
float N111[] = {-0.722243 ,0.384927 ,0.574627};
float N112[] = {-0.752278 ,0.502679 ,0.425901};
float N113[] = {0.547257 ,0.367910 ,0.751766};
float N114[] = {0.725949 ,-0.232568 ,0.647233};
float N115[] = {-0.747182 ,-0.660786 ,0.071280};
float N116[] = {0.931519 ,0.200748 ,0.303270};
float N117[] = {-0.828928 ,0.313757 ,0.463071};
float N118[] = {0.902554 ,-0.370967 ,0.218587};
float N119[] = {-0.879257 ,-0.441851 ,0.177973};
float N120[] = {0.642327 ,0.611901 ,0.461512};
float N121[] = {0.964817 ,-0.202322 ,0.167910};
float N122[] = {0.000000 ,1.000000 ,0.000000};
float P001[] = {5.68, -300.95, 1324.70};
float P002[] = {338.69, -219.63, 9677.03};
float P003[] = {12.18, 474.59, 9138.14};
float P005[] = {487.51, 198.05, 9350.78};
float P006[] = {-457.61, 68.74, 9427.85};
float P007[] = {156.52, -266.72, 10311.68};
float P008[] = {-185.56, -266.51, 10310.47};
float P009[] = {124.39, -261.46, 1942.34};
float P010[] = {-130.05, -261.46, 1946.03};
float P011[] = {141.07, -320.11, 1239.38};
float P012[] = {156.48, -360.12, 2073.41};
float P013[] = {162.00, -175.88, 2064.44};
float P014[] = {88.16, -87.72, 2064.02};
float P015[] = {-65.21, -96.13, 2064.02};
float P016[] = {-156.48, -180.96, 2064.44};
float P017[] = {-162.00, -368.93, 2082.39};
float P018[] = {-88.16, -439.22, 2082.39};
float P019[] = {65.21, -440.32, 2083.39};
float P020[] = {246.87, -356.02, 2576.95};
float P021[] = {253.17, -111.15, 2567.15};
float P022[] = {132.34, 51.41, 2559.84};
float P023[] = {-97.88, 40.44, 2567.15};
float P024[] = {-222.97, -117.49, 2567.15};
float P025[] = {-252.22, -371.53, 2569.92};
float P026[] = {-108.44, -518.19, 2586.75};
float P027[] = {97.88, -524.79, 2586.75};
float P028[] = {370.03, -421.19, 3419.70};
float P029[] = {351.15, -16.98, 3423.17};
float P030[] = {200.66, 248.46, 3430.37};
float P031[] = {-148.42, 235.02, 3417.91};
float P032[] = {-360.21, -30.27, 3416.84};
float P033[] = {-357.90, -414.89, 3407.04};
float P034[] = {-148.88, -631.35, 3409.90};
float P035[] = {156.38, -632.59, 3419.70};
float P036[] = {462.61, -469.21, 4431.51};
float P037[] = {466.60, 102.25, 4434.98};
float P038[] = {243.05, 474.34, 4562.02};
float P039[] = {-191.23, 474.40, 4554.42};
float P040[] = {-476.12, 111.05, 4451.11};
float P041[] = {-473.36, -470.74, 4444.78};
float P042[] = {-266.95, -748.41, 4447.78};
float P043[] = {211.14, -749.91, 4429.73};
float P044[] = {680.57, -370.27, 5943.46};
float P045[] = {834.01, 363.09, 6360.63};
float P046[] = {371.29, 804.51, 6486.26};
float P047[] = {-291.43, 797.22, 6494.28};
float P048[] = {-784.13, 370.75, 6378.01};
float P049[] = {-743.29, -325.82, 5943.46};
float P050[] = {-383.24, -804.77, 5943.46};
float P051[] = {283.47, -846.09, 5943.46};
float iP001[] = {5.68, -300.95, 1324.70};
float iP009[] = {124.39, -261.46, 1942.34};
float iP010[] = {-130.05, -261.46, 1946.03};
float iP011[] = {141.07, -320.11, 1239.38};
float iP012[] = {156.48, -360.12, 2073.41};
float iP013[] = {162.00, -175.88, 2064.44};
float iP014[] = {88.16, -87.72, 2064.02};
float iP015[] = {-65.21, -96.13, 2064.02};
float iP016[] = {-156.48, -180.96, 2064.44};
float iP017[] = {-162.00, -368.93, 2082.39};
float iP018[] = {-88.16, -439.22, 2082.39};
float iP019[] = {65.21, -440.32, 2083.39};
float iP020[] = {246.87, -356.02, 2576.95};
float iP021[] = {253.17, -111.15, 2567.15};
float iP022[] = {132.34, 51.41, 2559.84};
float iP023[] = {-97.88, 40.44, 2567.15};
float iP024[] = {-222.97, -117.49, 2567.15};
float iP025[] = {-252.22, -371.53, 2569.92};
float iP026[] = {-108.44, -518.19, 2586.75};
float iP027[] = {97.88, -524.79, 2586.75};
float iP028[] = {370.03, -421.19, 3419.70};
float iP029[] = {351.15, -16.98, 3423.17};
float iP030[] = {200.66, 248.46, 3430.37};
float iP031[] = {-148.42, 235.02, 3417.91};
float iP032[] = {-360.21, -30.27, 3416.84};
float iP033[] = {-357.90, -414.89, 3407.04};
float iP034[] = {-148.88, -631.35, 3409.90};
float iP035[] = {156.38, -632.59, 3419.70};
float iP036[] = {462.61, -469.21, 4431.51};
float iP037[] = {466.60, 102.25, 4434.98};
float iP038[] = {243.05, 474.34, 4562.02};
float iP039[] = {-191.23, 474.40, 4554.42};
float iP040[] = {-476.12, 111.05, 4451.11};
float iP041[] = {-473.36, -470.74, 4444.78};
float iP042[] = {-266.95, -748.41, 4447.78};
float iP043[] = {211.14, -749.91, 4429.73};
float iP044[] = {680.57, -370.27, 5943.46};
float iP045[] = {834.01, 363.09, 6360.63};
float iP046[] = {371.29, 804.51, 6486.26};
float iP047[] = {-291.43, 797.22, 6494.28};
float iP048[] = {-784.13, 370.75, 6378.01};
float iP049[] = {-743.29, -325.82, 5943.46};
float iP050[] = {-383.24, -804.77, 5943.46};
float iP051[] = {283.47, -846.09, 5943.46};
float P052[] = {599.09, -300.15, 7894.03};
float P053[] = {735.48, 306.26, 7911.92};
float P054[] = {246.22, 558.53, 8460.50};
float P055[] = {-230.41, 559.84, 8473.23};
float P056[] = {-698.66, 320.83, 7902.59};
float P057[] = {-643.29, -299.16, 7902.59};
float P058[] = {-341.47, -719.30, 7902.59};
float P059[] = {252.57, -756.12, 7902.59};
float P060[] = {458.39, -265.31, 9355.44};
float P062[] = {224.04, 338.75, 9450.30};
float P063[] = {-165.71, 341.04, 9462.35};
float P064[] = {-298.11, 110.13, 10180.37};
float P065[] = {-473.99, -219.71, 9355.44};
float P066[] = {-211.97, -479.87, 9355.44};
float P067[] = {192.86, -491.45, 9348.73};
float P068[] = {-136.29, -319.84, 1228.73};
float P069[] = {1111.17, -314.14, 1314.19};
float P070[] = {-1167.34, -321.61, 1319.45};
float P071[] = {1404.86, -306.66, 1235.45};
float P072[] = {-1409.73, -314.14, 1247.66};
float P073[] = {1254.01, -296.87, 1544.58};
float P074[] = {-1262.09, -291.70, 1504.26};
float P075[] = {965.71, -269.26, 1742.65};
float P076[] = {-900.97, -276.74, 1726.07};
float iP068[] = {-136.29, -319.84, 1228.73};
float iP069[] = {1111.17, -314.14, 1314.19};
float iP070[] = {-1167.34, -321.61, 1319.45};
float iP071[] = {1404.86, -306.66, 1235.45};
float iP072[] = {-1409.73, -314.14, 1247.66};
float iP073[] = {1254.01, -296.87, 1544.58};
float iP074[] = {-1262.09, -291.70, 1504.26};
float iP075[] = {965.71, -269.26, 1742.65};
float iP076[] = {-900.97, -276.74, 1726.07};
float P077[] = {1058.00, -448.81, 8194.66};
float P078[] = {-1016.51, -456.43, 8190.62};
float P079[] = {-1515.96, -676.45, 7754.93};
float P080[] = {1856.75, -830.34, 7296.56};
float P081[] = {1472.16, -497.38, 7399.68};
float P082[] = {-1775.26, -829.51, 7298.46};
float P083[] = {911.09, -252.51, 7510.99};
float P084[] = {-1451.94, -495.62, 7384.30};
float P085[] = {1598.75, -669.26, 7769.90};
float P086[] = {-836.53, -250.08, 7463.25};
float P087[] = {722.87, -158.18, 8006.41};
float P088[] = {-688.86, -162.28, 7993.89};
float P089[] = {-626.92, -185.30, 8364.98};
float P090[] = {647.72, -189.46, 8354.99};
float P091[] = {0.00, 835.01, 5555.62};
float P092[] = {0.00, 1350.18, 5220.86};
float P093[] = {0.00, 1422.94, 5285.27};
float P094[] = {0.00, 1296.75, 5650.19};
float P095[] = {0.00, 795.63, 6493.88};
float iP091[] = {0.00, 835.01, 5555.62};
float iP092[] = {0.00, 1350.18, 5220.86};
float iP093[] = {0.00, 1422.94, 5285.27};
float iP094[] = {0.00, 1296.75, 5650.19};
float iP095[] = {0.00, 795.63, 6493.88};
float P097[] = {-194.91, -357.14, 10313.32};
float P098[] = {135.35, -357.66, 10307.94};
float iP097[] = {-194.91, -357.14, 10313.32};
float iP098[] = {135.35, -357.66, 10307.94};
float P099[] = {-380.53, -221.14, 9677.98};
float P100[] = {0.00, 412.99, 9629.33};
float P102[] = {59.51, -412.55, 10677.58};
float iP102[] = {59.51, -412.55, 10677.58};
float P103[] = {6.50, 484.74, 9009.94};
float P105[] = {-41.86, 476.51, 9078.17};
float P108[] = {49.20, 476.83, 9078.24};
float P110[] = {-187.62, -410.04, 10674.12};
float iP110[] = {-187.62, -410.04, 10674.12};
float P111[] = {-184.25, -318.70, 10723.88};
float iP111[] = {-184.25, -318.70, 10723.88};
float P112[] = {-179.61, -142.81, 10670.26};
float P113[] = {57.43, -147.94, 10675.26};
float P114[] = {54.06, -218.90, 10712.44};
float P115[] = {-186.35, -212.09, 10713.76};
float P116[] = {205.90, -84.61, 10275.97};
float P117[] = {-230.96, -83.26, 10280.09};
float iP118[] = {216.78, -509.17, 10098.94};
float iP119[] = {-313.21, -510.79, 10102.62};
float P118[] = {216.78, -509.17, 10098.94};
float P119[] = {-313.21, -510.79, 10102.62};
float P120[] = {217.95, 96.34, 10161.62};
float P121[] = {71.99, -319.74, 10717.70};
float iP121[] = {71.99, -319.74, 10717.70};
float P122[] = {0.00, 602.74, 5375.84};
float iP122[] = {0.00, 602.74, 5375.84};
float P123[] = {-448.94, -203.14, 9499.60};
float P124[] = {-442.64, -185.20, 9528.07};
float P125[] = {-441.07, -148.05, 9528.07};
float P126[] = {-443.43, -128.84, 9499.60};
float P127[] = {-456.87, -146.78, 9466.67};
float P128[] = {-453.68, -183.93, 9466.67};
float P129[] = {428.43, -124.08, 9503.03};
float P130[] = {419.73, -142.14, 9534.56};
float P131[] = {419.92, -179.96, 9534.56};
float P132[] = {431.20, -199.73, 9505.26};
float P133[] = {442.28, -181.67, 9475.96};
float P134[] = {442.08, -143.84, 9475.96};
/* *INDENT-ON* */

void
Dolphin001()
{
    gl.glNormal3fv(N071);
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P001);
    gl.glVertex3fv(P068);
    gl.glVertex3fv(P010);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P068);
    gl.glVertex3fv(P076);
    gl.glVertex3fv(P010);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P068);
    gl.glVertex3fv(P070);
    gl.glVertex3fv(P076);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P076);
    gl.glVertex3fv(P070);
    gl.glVertex3fv(P074);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P070);
    gl.glVertex3fv(P072);
    gl.glVertex3fv(P074);
    gl.glEnd();
    gl.glNormal3fv(N119);
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P072);
    gl.glVertex3fv(P070);
    gl.glVertex3fv(P074);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P074);
    gl.glVertex3fv(P070);
    gl.glVertex3fv(P076);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P070);
    gl.glVertex3fv(P068);
    gl.glVertex3fv(P076);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P076);
    gl.glVertex3fv(P068);
    gl.glVertex3fv(P010);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P068);
    gl.glVertex3fv(P001);
    gl.glVertex3fv(P010);
    gl.glEnd();
}

void
Dolphin002()
{
    gl.glNormal3fv(N071);
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P011);
    gl.glVertex3fv(P001);
    gl.glVertex3fv(P009);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P075);
    gl.glVertex3fv(P011);
    gl.glVertex3fv(P009);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P069);
    gl.glVertex3fv(P011);
    gl.glVertex3fv(P075);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P069);
    gl.glVertex3fv(P075);
    gl.glVertex3fv(P073);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P071);
    gl.glVertex3fv(P069);
    gl.glVertex3fv(P073);
    gl.glEnd();
    gl.glNormal3fv(N119);
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P001);
    gl.glVertex3fv(P011);
    gl.glVertex3fv(P009);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P009);
    gl.glVertex3fv(P011);
    gl.glVertex3fv(P075);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P011);
    gl.glVertex3fv(P069);
    gl.glVertex3fv(P075);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P069);
    gl.glVertex3fv(P073);
    gl.glVertex3fv(P075);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P069);
    gl.glVertex3fv(P071);
    gl.glVertex3fv(P073);
    gl.glEnd();
}

void
Dolphin003()
{
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N018);
    gl.glVertex3fv(P018);
    gl.glNormal3fv(N001);
    gl.glVertex3fv(P001);
    gl.glNormal3fv(N019);
    gl.glVertex3fv(P019);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N019);
    gl.glVertex3fv(P019);
    gl.glNormal3fv(N001);
    gl.glVertex3fv(P001);
    gl.glNormal3fv(N012);
    gl.glVertex3fv(P012);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N017);
    gl.glVertex3fv(P017);
    gl.glNormal3fv(N001);
    gl.glVertex3fv(P001);
    gl.glNormal3fv(N018);
    gl.glVertex3fv(P018);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N001);
    gl.glVertex3fv(P001);
    gl.glNormal3fv(N017);
    gl.glVertex3fv(P017);
    gl.glNormal3fv(N016);
    gl.glVertex3fv(P016);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N001);
    gl.glVertex3fv(P001);
    gl.glNormal3fv(N013);
    gl.glVertex3fv(P013);
    gl.glNormal3fv(N012);
    gl.glVertex3fv(P012);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N001);
    gl.glVertex3fv(P001);
    gl.glNormal3fv(N016);
    gl.glVertex3fv(P016);
    gl.glNormal3fv(N015);
    gl.glVertex3fv(P015);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N001);
    gl.glVertex3fv(P001);
    gl.glNormal3fv(N014);
    gl.glVertex3fv(P014);
    gl.glNormal3fv(N013);
    gl.glVertex3fv(P013);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N001);
    gl.glVertex3fv(P001);
    gl.glNormal3fv(N015);
    gl.glVertex3fv(P015);
    gl.glNormal3fv(N014);
    gl.glVertex3fv(P014);
    gl.glEnd();
}

void
Dolphin004()
{
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N014);
    gl.glVertex3fv(P014);
    gl.glNormal3fv(N015);
    gl.glVertex3fv(P015);
    gl.glNormal3fv(N023);
    gl.glVertex3fv(P023);
    gl.glNormal3fv(N022);
    gl.glVertex3fv(P022);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N015);
    gl.glVertex3fv(P015);
    gl.glNormal3fv(N016);
    gl.glVertex3fv(P016);
    gl.glNormal3fv(N024);
    gl.glVertex3fv(P024);
    gl.glNormal3fv(N023);
    gl.glVertex3fv(P023);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N016);
    gl.glVertex3fv(P016);
    gl.glNormal3fv(N017);
    gl.glVertex3fv(P017);
    gl.glNormal3fv(N025);
    gl.glVertex3fv(P025);
    gl.glNormal3fv(N024);
    gl.glVertex3fv(P024);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N017);
    gl.glVertex3fv(P017);
    gl.glNormal3fv(N018);
    gl.glVertex3fv(P018);
    gl.glNormal3fv(N026);
    gl.glVertex3fv(P026);
    gl.glNormal3fv(N025);
    gl.glVertex3fv(P025);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N013);
    gl.glVertex3fv(P013);
    gl.glNormal3fv(N014);
    gl.glVertex3fv(P014);
    gl.glNormal3fv(N022);
    gl.glVertex3fv(P022);
    gl.glNormal3fv(N021);
    gl.glVertex3fv(P021);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N012);
    gl.glVertex3fv(P012);
    gl.glNormal3fv(N013);
    gl.glVertex3fv(P013);
    gl.glNormal3fv(N021);
    gl.glVertex3fv(P021);
    gl.glNormal3fv(N020);
    gl.glVertex3fv(P020);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N018);
    gl.glVertex3fv(P018);
    gl.glNormal3fv(N019);
    gl.glVertex3fv(P019);
    gl.glNormal3fv(N027);
    gl.glVertex3fv(P027);
    gl.glNormal3fv(N026);
    gl.glVertex3fv(P026);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N019);
    gl.glVertex3fv(P019);
    gl.glNormal3fv(N012);
    gl.glVertex3fv(P012);
    gl.glNormal3fv(N020);
    gl.glVertex3fv(P020);
    gl.glNormal3fv(N027);
    gl.glVertex3fv(P027);
    gl.glEnd();
}

void
Dolphin005()
{
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N022);
    gl.glVertex3fv(P022);
    gl.glNormal3fv(N023);
    gl.glVertex3fv(P023);
    gl.glNormal3fv(N031);
    gl.glVertex3fv(P031);
    gl.glNormal3fv(N030);
    gl.glVertex3fv(P030);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N021);
    gl.glVertex3fv(P021);
    gl.glNormal3fv(N022);
    gl.glVertex3fv(P022);
    gl.glNormal3fv(N030);
    gl.glVertex3fv(P030);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N021);
    gl.glVertex3fv(P021);
    gl.glNormal3fv(N030);
    gl.glVertex3fv(P030);
    gl.glNormal3fv(N029);
    gl.glVertex3fv(P029);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N023);
    gl.glVertex3fv(P023);
    gl.glNormal3fv(N024);
    gl.glVertex3fv(P024);
    gl.glNormal3fv(N031);
    gl.glVertex3fv(P031);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N024);
    gl.glVertex3fv(P024);
    gl.glNormal3fv(N032);
    gl.glVertex3fv(P032);
    gl.glNormal3fv(N031);
    gl.glVertex3fv(P031);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N024);
    gl.glVertex3fv(P024);
    gl.glNormal3fv(N025);
    gl.glVertex3fv(P025);
    gl.glNormal3fv(N032);
    gl.glVertex3fv(P032);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N025);
    gl.glVertex3fv(P025);
    gl.glNormal3fv(N033);
    gl.glVertex3fv(P033);
    gl.glNormal3fv(N032);
    gl.glVertex3fv(P032);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N020);
    gl.glVertex3fv(P020);
    gl.glNormal3fv(N021);
    gl.glVertex3fv(P021);
    gl.glNormal3fv(N029);
    gl.glVertex3fv(P029);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N020);
    gl.glVertex3fv(P020);
    gl.glNormal3fv(N029);
    gl.glVertex3fv(P029);
    gl.glNormal3fv(N028);
    gl.glVertex3fv(P028);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N027);
    gl.glVertex3fv(P027);
    gl.glNormal3fv(N020);
    gl.glVertex3fv(P020);
    gl.glNormal3fv(N028);
    gl.glVertex3fv(P028);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N027);
    gl.glVertex3fv(P027);
    gl.glNormal3fv(N028);
    gl.glVertex3fv(P028);
    gl.glNormal3fv(N035);
    gl.glVertex3fv(P035);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N025);
    gl.glVertex3fv(P025);
    gl.glNormal3fv(N026);
    gl.glVertex3fv(P026);
    gl.glNormal3fv(N033);
    gl.glVertex3fv(P033);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N033);
    gl.glVertex3fv(P033);
    gl.glNormal3fv(N026);
    gl.glVertex3fv(P026);
    gl.glNormal3fv(N034);
    gl.glVertex3fv(P034);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N026);
    gl.glVertex3fv(P026);
    gl.glNormal3fv(N027);
    gl.glVertex3fv(P027);
    gl.glNormal3fv(N035);
    gl.glVertex3fv(P035);
    gl.glNormal3fv(N034);
    gl.glVertex3fv(P034);
    gl.glEnd();
}

void
Dolphin006()
{
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N092);
    gl.glVertex3fv(P092);
    gl.glNormal3fv(N093);
    gl.glVertex3fv(P093);
    gl.glNormal3fv(N094);
    gl.glVertex3fv(P094);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N093);
    gl.glVertex3fv(P093);
    gl.glNormal3fv(N092);
    gl.glVertex3fv(P092);
    gl.glNormal3fv(N094);
    gl.glVertex3fv(P094);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N092);
    gl.glVertex3fv(P092);
    gl.glNormal3fv(N091);
    gl.glVertex3fv(P091);
    gl.glNormal3fv(N095);
    gl.glVertex3fv(P095);
    gl.glNormal3fv(N094);
    gl.glVertex3fv(P094);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N091);
    gl.glVertex3fv(P091);
    gl.glNormal3fv(N092);
    gl.glVertex3fv(P092);
    gl.glNormal3fv(N094);
    gl.glVertex3fv(P094);
    gl.glNormal3fv(N095);
    gl.glVertex3fv(P095);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N122);
    gl.glVertex3fv(P122);
    gl.glNormal3fv(N095);
    gl.glVertex3fv(P095);
    gl.glNormal3fv(N091);
    gl.glVertex3fv(P091);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N122);
    gl.glVertex3fv(P122);
    gl.glNormal3fv(N091);
    gl.glVertex3fv(P091);
    gl.glNormal3fv(N095);
    gl.glVertex3fv(P095);
    gl.glEnd();
}

void
Dolphin007()
{
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N030);
    gl.glVertex3fv(P030);
    gl.glNormal3fv(N031);
    gl.glVertex3fv(P031);
    gl.glNormal3fv(N039);
    gl.glVertex3fv(P039);
    gl.glNormal3fv(N038);
    gl.glVertex3fv(P038);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N029);
    gl.glVertex3fv(P029);
    gl.glNormal3fv(N030);
    gl.glVertex3fv(P030);
    gl.glNormal3fv(N038);
    gl.glVertex3fv(P038);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N029);
    gl.glVertex3fv(P029);
    gl.glNormal3fv(N038);
    gl.glVertex3fv(P038);
    gl.glNormal3fv(N037);
    gl.glVertex3fv(P037);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N028);
    gl.glVertex3fv(P028);
    gl.glNormal3fv(N029);
    gl.glVertex3fv(P029);
    gl.glNormal3fv(N037);
    gl.glVertex3fv(P037);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N028);
    gl.glVertex3fv(P028);
    gl.glNormal3fv(N037);
    gl.glVertex3fv(P037);
    gl.glNormal3fv(N036);
    gl.glVertex3fv(P036);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N035);
    gl.glVertex3fv(P035);
    gl.glNormal3fv(N028);
    gl.glVertex3fv(P028);
    gl.glNormal3fv(N036);
    gl.glVertex3fv(P036);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N035);
    gl.glVertex3fv(P035);
    gl.glNormal3fv(N036);
    gl.glVertex3fv(P036);
    gl.glNormal3fv(N043);
    gl.glVertex3fv(P043);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N034);
    gl.glVertex3fv(P034);
    gl.glNormal3fv(N035);
    gl.glVertex3fv(P035);
    gl.glNormal3fv(N043);
    gl.glVertex3fv(P043);
    gl.glNormal3fv(N042);
    gl.glVertex3fv(P042);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N033);
    gl.glVertex3fv(P033);
    gl.glNormal3fv(N034);
    gl.glVertex3fv(P034);
    gl.glNormal3fv(N042);
    gl.glVertex3fv(P042);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N033);
    gl.glVertex3fv(P033);
    gl.glNormal3fv(N042);
    gl.glVertex3fv(P042);
    gl.glNormal3fv(N041);
    gl.glVertex3fv(P041);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N031);
    gl.glVertex3fv(P031);
    gl.glNormal3fv(N032);
    gl.glVertex3fv(P032);
    gl.glNormal3fv(N039);
    gl.glVertex3fv(P039);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N039);
    gl.glVertex3fv(P039);
    gl.glNormal3fv(N032);
    gl.glVertex3fv(P032);
    gl.glNormal3fv(N040);
    gl.glVertex3fv(P040);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N032);
    gl.glVertex3fv(P032);
    gl.glNormal3fv(N033);
    gl.glVertex3fv(P033);
    gl.glNormal3fv(N040);
    gl.glVertex3fv(P040);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N040);
    gl.glVertex3fv(P040);
    gl.glNormal3fv(N033);
    gl.glVertex3fv(P033);
    gl.glNormal3fv(N041);
    gl.glVertex3fv(P041);
    gl.glEnd();
}

void
Dolphin008()
{
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N042);
    gl.glVertex3fv(P042);
    gl.glNormal3fv(N043);
    gl.glVertex3fv(P043);
    gl.glNormal3fv(N051);
    gl.glVertex3fv(P051);
    gl.glNormal3fv(N050);
    gl.glVertex3fv(P050);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N043);
    gl.glVertex3fv(P043);
    gl.glNormal3fv(N036);
    gl.glVertex3fv(P036);
    gl.glNormal3fv(N051);
    gl.glVertex3fv(P051);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N051);
    gl.glVertex3fv(P051);
    gl.glNormal3fv(N036);
    gl.glVertex3fv(P036);
    gl.glNormal3fv(N044);
    gl.glVertex3fv(P044);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N041);
    gl.glVertex3fv(P041);
    gl.glNormal3fv(N042);
    gl.glVertex3fv(P042);
    gl.glNormal3fv(N050);
    gl.glVertex3fv(P050);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N041);
    gl.glVertex3fv(P041);
    gl.glNormal3fv(N050);
    gl.glVertex3fv(P050);
    gl.glNormal3fv(N049);
    gl.glVertex3fv(P049);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N036);
    gl.glVertex3fv(P036);
    gl.glNormal3fv(N037);
    gl.glVertex3fv(P037);
    gl.glNormal3fv(N044);
    gl.glVertex3fv(P044);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N044);
    gl.glVertex3fv(P044);
    gl.glNormal3fv(N037);
    gl.glVertex3fv(P037);
    gl.glNormal3fv(N045);
    gl.glVertex3fv(P045);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N040);
    gl.glVertex3fv(P040);
    gl.glNormal3fv(N041);
    gl.glVertex3fv(P041);
    gl.glNormal3fv(N049);
    gl.glVertex3fv(P049);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N040);
    gl.glVertex3fv(P040);
    gl.glNormal3fv(N049);
    gl.glVertex3fv(P049);
    gl.glNormal3fv(N048);
    gl.glVertex3fv(P048);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N039);
    gl.glVertex3fv(P039);
    gl.glNormal3fv(N040);
    gl.glVertex3fv(P040);
    gl.glNormal3fv(N048);
    gl.glVertex3fv(P048);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N039);
    gl.glVertex3fv(P039);
    gl.glNormal3fv(N048);
    gl.glVertex3fv(P048);
    gl.glNormal3fv(N047);
    gl.glVertex3fv(P047);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N037);
    gl.glVertex3fv(P037);
    gl.glNormal3fv(N038);
    gl.glVertex3fv(P038);
    gl.glNormal3fv(N045);
    gl.glVertex3fv(P045);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N038);
    gl.glVertex3fv(P038);
    gl.glNormal3fv(N046);
    gl.glVertex3fv(P046);
    gl.glNormal3fv(N045);
    gl.glVertex3fv(P045);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N038);
    gl.glVertex3fv(P038);
    gl.glNormal3fv(N039);
    gl.glVertex3fv(P039);
    gl.glNormal3fv(N047);
    gl.glVertex3fv(P047);
    gl.glNormal3fv(N046);
    gl.glVertex3fv(P046);
    gl.glEnd();
}

void
Dolphin009()
{
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N050);
    gl.glVertex3fv(P050);
    gl.glNormal3fv(N051);
    gl.glVertex3fv(P051);
    gl.glNormal3fv(N059);
    gl.glVertex3fv(P059);
    gl.glNormal3fv(N058);
    gl.glVertex3fv(P058);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N051);
    gl.glVertex3fv(P051);
    gl.glNormal3fv(N044);
    gl.glVertex3fv(P044);
    gl.glNormal3fv(N059);
    gl.glVertex3fv(P059);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N059);
    gl.glVertex3fv(P059);
    gl.glNormal3fv(N044);
    gl.glVertex3fv(P044);
    gl.glNormal3fv(N052);
    gl.glVertex3fv(P052);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N044);
    gl.glVertex3fv(P044);
    gl.glNormal3fv(N045);
    gl.glVertex3fv(P045);
    gl.glNormal3fv(N053);
    gl.glVertex3fv(P053);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N044);
    gl.glVertex3fv(P044);
    gl.glNormal3fv(N053);
    gl.glVertex3fv(P053);
    gl.glNormal3fv(N052);
    gl.glVertex3fv(P052);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N049);
    gl.glVertex3fv(P049);
    gl.glNormal3fv(N050);
    gl.glVertex3fv(P050);
    gl.glNormal3fv(N058);
    gl.glVertex3fv(P058);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N049);
    gl.glVertex3fv(P049);
    gl.glNormal3fv(N058);
    gl.glVertex3fv(P058);
    gl.glNormal3fv(N057);
    gl.glVertex3fv(P057);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N048);
    gl.glVertex3fv(P048);
    gl.glNormal3fv(N049);
    gl.glVertex3fv(P049);
    gl.glNormal3fv(N057);
    gl.glVertex3fv(P057);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N048);
    gl.glVertex3fv(P048);
    gl.glNormal3fv(N057);
    gl.glVertex3fv(P057);
    gl.glNormal3fv(N056);
    gl.glVertex3fv(P056);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N047);
    gl.glVertex3fv(P047);
    gl.glNormal3fv(N048);
    gl.glVertex3fv(P048);
    gl.glNormal3fv(N056);
    gl.glVertex3fv(P056);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N047);
    gl.glVertex3fv(P047);
    gl.glNormal3fv(N056);
    gl.glVertex3fv(P056);
    gl.glNormal3fv(N055);
    gl.glVertex3fv(P055);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N045);
    gl.glVertex3fv(P045);
    gl.glNormal3fv(N046);
    gl.glVertex3fv(P046);
    gl.glNormal3fv(N053);
    gl.glVertex3fv(P053);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N046);
    gl.glVertex3fv(P046);
    gl.glNormal3fv(N054);
    gl.glVertex3fv(P054);
    gl.glNormal3fv(N053);
    gl.glVertex3fv(P053);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N046);
    gl.glVertex3fv(P046);
    gl.glNormal3fv(N047);
    gl.glVertex3fv(P047);
    gl.glNormal3fv(N055);
    gl.glVertex3fv(P055);
    gl.glNormal3fv(N054);
    gl.glVertex3fv(P054);
    gl.glEnd();
}

void
Dolphin010()
{
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N080);
    gl.glVertex3fv(P080);
    gl.glNormal3fv(N081);
    gl.glVertex3fv(P081);
    gl.glNormal3fv(N085);
    gl.glVertex3fv(P085);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N081);
    gl.glVertex3fv(P081);
    gl.glNormal3fv(N083);
    gl.glVertex3fv(P083);
    gl.glNormal3fv(N085);
    gl.glVertex3fv(P085);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N085);
    gl.glVertex3fv(P085);
    gl.glNormal3fv(N083);
    gl.glVertex3fv(P083);
    gl.glNormal3fv(N077);
    gl.glVertex3fv(P077);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N083);
    gl.glVertex3fv(P083);
    gl.glNormal3fv(N087);
    gl.glVertex3fv(P087);
    gl.glNormal3fv(N077);
    gl.glVertex3fv(P077);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N077);
    gl.glVertex3fv(P077);
    gl.glNormal3fv(N087);
    gl.glVertex3fv(P087);
    gl.glNormal3fv(N090);
    gl.glVertex3fv(P090);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N081);
    gl.glVertex3fv(P081);
    gl.glNormal3fv(N080);
    gl.glVertex3fv(P080);
    gl.glNormal3fv(N085);
    gl.glVertex3fv(P085);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N083);
    gl.glVertex3fv(P083);
    gl.glNormal3fv(N081);
    gl.glVertex3fv(P081);
    gl.glNormal3fv(N085);
    gl.glVertex3fv(P085);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N083);
    gl.glVertex3fv(P083);
    gl.glNormal3fv(N085);
    gl.glVertex3fv(P085);
    gl.glNormal3fv(N077);
    gl.glVertex3fv(P077);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N087);
    gl.glVertex3fv(P087);
    gl.glNormal3fv(N083);
    gl.glVertex3fv(P083);
    gl.glNormal3fv(N077);
    gl.glVertex3fv(P077);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N087);
    gl.glVertex3fv(P087);
    gl.glNormal3fv(N077);
    gl.glVertex3fv(P077);
    gl.glNormal3fv(N090);
    gl.glVertex3fv(P090);
    gl.glEnd();
}

void
Dolphin011()
{
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N082);
    gl.glVertex3fv(P082);
    gl.glNormal3fv(N084);
    gl.glVertex3fv(P084);
    gl.glNormal3fv(N079);
    gl.glVertex3fv(P079);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N084);
    gl.glVertex3fv(P084);
    gl.glNormal3fv(N086);
    gl.glVertex3fv(P086);
    gl.glNormal3fv(N079);
    gl.glVertex3fv(P079);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N079);
    gl.glVertex3fv(P079);
    gl.glNormal3fv(N086);
    gl.glVertex3fv(P086);
    gl.glNormal3fv(N078);
    gl.glVertex3fv(P078);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N086);
    gl.glVertex3fv(P086);
    gl.glNormal3fv(N088);
    gl.glVertex3fv(P088);
    gl.glNormal3fv(N078);
    gl.glVertex3fv(P078);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N078);
    gl.glVertex3fv(P078);
    gl.glNormal3fv(N088);
    gl.glVertex3fv(P088);
    gl.glNormal3fv(N089);
    gl.glVertex3fv(P089);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N088);
    gl.glVertex3fv(P088);
    gl.glNormal3fv(N086);
    gl.glVertex3fv(P086);
    gl.glNormal3fv(N089);
    gl.glVertex3fv(P089);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N089);
    gl.glVertex3fv(P089);
    gl.glNormal3fv(N086);
    gl.glVertex3fv(P086);
    gl.glNormal3fv(N078);
    gl.glVertex3fv(P078);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N086);
    gl.glVertex3fv(P086);
    gl.glNormal3fv(N084);
    gl.glVertex3fv(P084);
    gl.glNormal3fv(N078);
    gl.glVertex3fv(P078);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N078);
    gl.glVertex3fv(P078);
    gl.glNormal3fv(N084);
    gl.glVertex3fv(P084);
    gl.glNormal3fv(N079);
    gl.glVertex3fv(P079);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N084);
    gl.glVertex3fv(P084);
    gl.glNormal3fv(N082);
    gl.glVertex3fv(P082);
    gl.glNormal3fv(N079);
    gl.glVertex3fv(P079);
    gl.glEnd();
}

void
Dolphin012()
{
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N058);
    gl.glVertex3fv(P058);
    gl.glNormal3fv(N059);
    gl.glVertex3fv(P059);
    gl.glNormal3fv(N067);
    gl.glVertex3fv(P067);
    gl.glNormal3fv(N066);
    gl.glVertex3fv(P066);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N059);
    gl.glVertex3fv(P059);
    gl.glNormal3fv(N052);
    gl.glVertex3fv(P052);
    gl.glNormal3fv(N060);
    gl.glVertex3fv(P060);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N059);
    gl.glVertex3fv(P059);
    gl.glNormal3fv(N060);
    gl.glVertex3fv(P060);
    gl.glNormal3fv(N067);
    gl.glVertex3fv(P067);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N058);
    gl.glVertex3fv(P058);
    gl.glNormal3fv(N066);
    gl.glVertex3fv(P066);
    gl.glNormal3fv(N065);
    gl.glVertex3fv(P065);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N058);
    gl.glVertex3fv(P058);
    gl.glNormal3fv(N065);
    gl.glVertex3fv(P065);
    gl.glNormal3fv(N057);
    gl.glVertex3fv(P057);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N056);
    gl.glVertex3fv(P056);
    gl.glNormal3fv(N057);
    gl.glVertex3fv(P057);
    gl.glNormal3fv(N065);
    gl.glVertex3fv(P065);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N056);
    gl.glVertex3fv(P056);
    gl.glNormal3fv(N065);
    gl.glVertex3fv(P065);
    gl.glNormal3fv(N006);
    gl.glVertex3fv(P006);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N056);
    gl.glVertex3fv(P056);
    gl.glNormal3fv(N006);
    gl.glVertex3fv(P006);
    gl.glNormal3fv(N063);
    gl.glVertex3fv(P063);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N056);
    gl.glVertex3fv(P056);
    gl.glNormal3fv(N063);
    gl.glVertex3fv(P063);
    gl.glNormal3fv(N055);
    gl.glVertex3fv(P055);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N054);
    gl.glVertex3fv(P054);
    gl.glNormal3fv(N062);
    gl.glVertex3fv(P062);
    gl.glNormal3fv(N005);
    gl.glVertex3fv(P005);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N054);
    gl.glVertex3fv(P054);
    gl.glNormal3fv(N005);
    gl.glVertex3fv(P005);
    gl.glNormal3fv(N053);
    gl.glVertex3fv(P053);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N052);
    gl.glVertex3fv(P052);
    gl.glNormal3fv(N053);
    gl.glVertex3fv(P053);
    gl.glNormal3fv(N005);
    gl.glVertex3fv(P005);
    gl.glNormal3fv(N060);
    gl.glVertex3fv(P060);
    gl.glEnd();
}

void
Dolphin013()
{
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N116);
    gl.glVertex3fv(P116);
    gl.glNormal3fv(N117);
    gl.glVertex3fv(P117);
    gl.glNormal3fv(N112);
    gl.glVertex3fv(P112);
    gl.glNormal3fv(N113);
    gl.glVertex3fv(P113);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N114);
    gl.glVertex3fv(P114);
    gl.glNormal3fv(N113);
    gl.glVertex3fv(P113);
    gl.glNormal3fv(N112);
    gl.glVertex3fv(P112);
    gl.glNormal3fv(N115);
    gl.glVertex3fv(P115);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N114);
    gl.glVertex3fv(P114);
    gl.glNormal3fv(N116);
    gl.glVertex3fv(P116);
    gl.glNormal3fv(N113);
    gl.glVertex3fv(P113);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N114);
    gl.glVertex3fv(P114);
    gl.glNormal3fv(N007);
    gl.glVertex3fv(P007);
    gl.glNormal3fv(N116);
    gl.glVertex3fv(P116);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N007);
    gl.glVertex3fv(P007);
    gl.glNormal3fv(N002);
    gl.glVertex3fv(P002);
    gl.glNormal3fv(N116);
    gl.glVertex3fv(P116);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P002);
    gl.glVertex3fv(P007);
    gl.glVertex3fv(P008);
    gl.glVertex3fv(P099);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P007);
    gl.glVertex3fv(P114);
    gl.glVertex3fv(P115);
    gl.glVertex3fv(P008);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N117);
    gl.glVertex3fv(P117);
    gl.glNormal3fv(N099);
    gl.glVertex3fv(P099);
    gl.glNormal3fv(N008);
    gl.glVertex3fv(P008);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N117);
    gl.glVertex3fv(P117);
    gl.glNormal3fv(N008);
    gl.glVertex3fv(P008);
    gl.glNormal3fv(N112);
    gl.glVertex3fv(P112);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N112);
    gl.glVertex3fv(P112);
    gl.glNormal3fv(N008);
    gl.glVertex3fv(P008);
    gl.glNormal3fv(N115);
    gl.glVertex3fv(P115);
    gl.glEnd();
}

void
Dolphin014()
{
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N111);
    gl.glVertex3fv(P111);
    gl.glNormal3fv(N110);
    gl.glVertex3fv(P110);
    gl.glNormal3fv(N102);
    gl.glVertex3fv(P102);
    gl.glNormal3fv(N121);
    gl.glVertex3fv(P121);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N111);
    gl.glVertex3fv(P111);
    gl.glNormal3fv(N097);
    gl.glVertex3fv(P097);
    gl.glNormal3fv(N110);
    gl.glVertex3fv(P110);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N097);
    gl.glVertex3fv(P097);
    gl.glNormal3fv(N119);
    gl.glVertex3fv(P119);
    gl.glNormal3fv(N110);
    gl.glVertex3fv(P110);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N097);
    gl.glVertex3fv(P097);
    gl.glNormal3fv(N099);
    gl.glVertex3fv(P099);
    gl.glNormal3fv(N119);
    gl.glVertex3fv(P119);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N099);
    gl.glVertex3fv(P099);
    gl.glNormal3fv(N065);
    gl.glVertex3fv(P065);
    gl.glNormal3fv(N119);
    gl.glVertex3fv(P119);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N065);
    gl.glVertex3fv(P065);
    gl.glNormal3fv(N066);
    gl.glVertex3fv(P066);
    gl.glNormal3fv(N119);
    gl.glVertex3fv(P119);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P098);
    gl.glVertex3fv(P097);
    gl.glVertex3fv(P111);
    gl.glVertex3fv(P121);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P002);
    gl.glVertex3fv(P099);
    gl.glVertex3fv(P097);
    gl.glVertex3fv(P098);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N110);
    gl.glVertex3fv(P110);
    gl.glNormal3fv(N119);
    gl.glVertex3fv(P119);
    gl.glNormal3fv(N118);
    gl.glVertex3fv(P118);
    gl.glNormal3fv(N102);
    gl.glVertex3fv(P102);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N119);
    gl.glVertex3fv(P119);
    gl.glNormal3fv(N066);
    gl.glVertex3fv(P066);
    gl.glNormal3fv(N067);
    gl.glVertex3fv(P067);
    gl.glNormal3fv(N118);
    gl.glVertex3fv(P118);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N067);
    gl.glVertex3fv(P067);
    gl.glNormal3fv(N060);
    gl.glVertex3fv(P060);
    gl.glNormal3fv(N002);
    gl.glVertex3fv(P002);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N067);
    gl.glVertex3fv(P067);
    gl.glNormal3fv(N002);
    gl.glVertex3fv(P002);
    gl.glNormal3fv(N118);
    gl.glVertex3fv(P118);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N118);
    gl.glVertex3fv(P118);
    gl.glNormal3fv(N002);
    gl.glVertex3fv(P002);
    gl.glNormal3fv(N098);
    gl.glVertex3fv(P098);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N118);
    gl.glVertex3fv(P118);
    gl.glNormal3fv(N098);
    gl.glVertex3fv(P098);
    gl.glNormal3fv(N102);
    gl.glVertex3fv(P102);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N102);
    gl.glVertex3fv(P102);
    gl.glNormal3fv(N098);
    gl.glVertex3fv(P098);
    gl.glNormal3fv(N121);
    gl.glVertex3fv(P121);
    gl.glEnd();
}

void
Dolphin015()
{
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N055);
    gl.glVertex3fv(P055);
    gl.glNormal3fv(N003);
    gl.glVertex3fv(P003);
    gl.glNormal3fv(N054);
    gl.glVertex3fv(P054);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N003);
    gl.glVertex3fv(P003);
    gl.glNormal3fv(N055);
    gl.glVertex3fv(P055);
    gl.glNormal3fv(N063);
    gl.glVertex3fv(P063);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N003);
    gl.glVertex3fv(P003);
    gl.glNormal3fv(N063);
    gl.glVertex3fv(P063);
    gl.glNormal3fv(N100);
    gl.glVertex3fv(P100);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N003);
    gl.glVertex3fv(P003);
    gl.glNormal3fv(N100);
    gl.glVertex3fv(P100);
    gl.glNormal3fv(N054);
    gl.glVertex3fv(P054);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N054);
    gl.glVertex3fv(P054);
    gl.glNormal3fv(N100);
    gl.glVertex3fv(P100);
    gl.glNormal3fv(N062);
    gl.glVertex3fv(P062);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N100);
    gl.glVertex3fv(P100);
    gl.glNormal3fv(N064);
    gl.glVertex3fv(P064);
    gl.glNormal3fv(N120);
    gl.glVertex3fv(P120);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N100);
    gl.glVertex3fv(P100);
    gl.glNormal3fv(N063);
    gl.glVertex3fv(P063);
    gl.glNormal3fv(N064);
    gl.glVertex3fv(P064);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N063);
    gl.glVertex3fv(P063);
    gl.glNormal3fv(N006);
    gl.glVertex3fv(P006);
    gl.glNormal3fv(N064);
    gl.glVertex3fv(P064);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N064);
    gl.glVertex3fv(P064);
    gl.glNormal3fv(N006);
    gl.glVertex3fv(P006);
    gl.glNormal3fv(N099);
    gl.glVertex3fv(P099);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N064);
    gl.glVertex3fv(P064);
    gl.glNormal3fv(N099);
    gl.glVertex3fv(P099);
    gl.glNormal3fv(N117);
    gl.glVertex3fv(P117);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N120);
    gl.glVertex3fv(P120);
    gl.glNormal3fv(N064);
    gl.glVertex3fv(P064);
    gl.glNormal3fv(N117);
    gl.glVertex3fv(P117);
    gl.glNormal3fv(N116);
    gl.glVertex3fv(P116);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N006);
    gl.glVertex3fv(P006);
    gl.glNormal3fv(N065);
    gl.glVertex3fv(P065);
    gl.glNormal3fv(N099);
    gl.glVertex3fv(P099);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N062);
    gl.glVertex3fv(P062);
    gl.glNormal3fv(N100);
    gl.glVertex3fv(P100);
    gl.glNormal3fv(N120);
    gl.glVertex3fv(P120);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N005);
    gl.glVertex3fv(P005);
    gl.glNormal3fv(N062);
    gl.glVertex3fv(P062);
    gl.glNormal3fv(N120);
    gl.glVertex3fv(P120);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N005);
    gl.glVertex3fv(P005);
    gl.glNormal3fv(N120);
    gl.glVertex3fv(P120);
    gl.glNormal3fv(N002);
    gl.glVertex3fv(P002);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N002);
    gl.glVertex3fv(P002);
    gl.glNormal3fv(N120);
    gl.glVertex3fv(P120);
    gl.glNormal3fv(N116);
    gl.glVertex3fv(P116);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glNormal3fv(N060);
    gl.glVertex3fv(P060);
    gl.glNormal3fv(N005);
    gl.glVertex3fv(P005);
    gl.glNormal3fv(N002);
    gl.glVertex3fv(P002);
    gl.glEnd();
}

void
Dolphin016()
{

    gl.glDisable(GL.GL_DEPTH_TEST);
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P123);
    gl.glVertex3fv(P124);
    gl.glVertex3fv(P125);
    gl.glVertex3fv(P126);
    gl.glVertex3fv(P127);
    gl.glVertex3fv(P128);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P129);
    gl.glVertex3fv(P130);
    gl.glVertex3fv(P131);
    gl.glVertex3fv(P132);
    gl.glVertex3fv(P133);
    gl.glVertex3fv(P134);
    gl.glEnd();
    gl.glBegin(GL.GL_POLYGON);
    gl.glVertex3fv(P103);
    gl.glVertex3fv(P105);
    gl.glVertex3fv(P108);
    gl.glEnd();
    gl.glEnable(GL.GL_DEPTH_TEST);
}

int dolphin_tail = 0;

void Draw()
{
    float seg0, seg1, seg2, seg3, seg4, seg5, seg6, seg7;
    float pitch, thrash, chomp;
    float dolphin_velocity = Velocity.Magnitude();///10;

//    textureDolphin();

    setMaterialDiffuseColor(0.6f,0.7f,1.0f,1.0f);
    
    gl.glScalef(0.75, 0.75, 0.75);
    
    /* Orient to given coordinate system */    
    gl.glRotatef(-90.0, 1.0, 0.0, 0.0);    
    gl.glRotatef(-90.0, 0.0, 1.0, 0.0);    
    gl.glRotatef(-90.0, 0.0, 0.0, 1.0);      

    dolphin_tail = (int) (dolphin_tail - (int) (dolphin_velocity)) % 360;

    thrash = 20.0 * dolphin_velocity;

    seg0 = 1.0 * thrash * sin((dolphin_tail) * RRAD);
    seg3 = 1.0 * thrash * sin((dolphin_tail) * RRAD);
    seg1 = 2.0 * thrash * sin((dolphin_tail + 4.0) * RRAD);
    seg2 = 3.0 * thrash * sin((dolphin_tail + 6.0) * RRAD);
    seg4 = 4.0 * thrash * sin((dolphin_tail + 10.0) * RRAD);
    seg5 = 4.5 * thrash * sin((dolphin_tail + 15.0) * RRAD);
    seg6 = 5.0 * thrash * sin((dolphin_tail + 20.0) * RRAD);
    seg7 = 6.0 * thrash * sin((dolphin_tail + 30.0) * RRAD);

    pitch = dolphin_velocity * sin((dolphin_tail + 180.0) * RRAD);

    if (dolphin_velocity > 0.5) {
        chomp = -(dolphin_velocity - 2.0) * 200.0;
    }
    chomp = 100.0;

    P012[1] = iP012[1] + seg5;
    P013[1] = iP013[1] + seg5;
    P014[1] = iP014[1] + seg5;
    P015[1] = iP015[1] + seg5;
    P016[1] = iP016[1] + seg5;
    P017[1] = iP017[1] + seg5;
    P018[1] = iP018[1] + seg5;
    P019[1] = iP019[1] + seg5;

    P020[1] = iP020[1] + seg4;
    P021[1] = iP021[1] + seg4;
    P022[1] = iP022[1] + seg4;
    P023[1] = iP023[1] + seg4;
    P024[1] = iP024[1] + seg4;
    P025[1] = iP025[1] + seg4;
    P026[1] = iP026[1] + seg4;
    P027[1] = iP027[1] + seg4;

    P028[1] = iP028[1] + seg2;
    P029[1] = iP029[1] + seg2;
    P030[1] = iP030[1] + seg2;
    P031[1] = iP031[1] + seg2;
    P032[1] = iP032[1] + seg2;
    P033[1] = iP033[1] + seg2;
    P034[1] = iP034[1] + seg2;
    P035[1] = iP035[1] + seg2;

    P036[1] = iP036[1] + seg1;
    P037[1] = iP037[1] + seg1;
    P038[1] = iP038[1] + seg1;
    P039[1] = iP039[1] + seg1;
    P040[1] = iP040[1] + seg1;
    P041[1] = iP041[1] + seg1;
    P042[1] = iP042[1] + seg1;
    P043[1] = iP043[1] + seg1;

    P044[1] = iP044[1] + seg0;
    P045[1] = iP045[1] + seg0;
    P046[1] = iP046[1] + seg0;
    P047[1] = iP047[1] + seg0;
    P048[1] = iP048[1] + seg0;
    P049[1] = iP049[1] + seg0;
    P050[1] = iP050[1] + seg0;
    P051[1] = iP051[1] + seg0;

    P009[1] = iP009[1] + seg6;
    P010[1] = iP010[1] + seg6;
    P075[1] = iP075[1] + seg6;
    P076[1] = iP076[1] + seg6;

    P001[1] = iP001[1] + seg7;
    P011[1] = iP011[1] + seg7;
    P068[1] = iP068[1] + seg7;
    P069[1] = iP069[1] + seg7;
    P070[1] = iP070[1] + seg7;
    P071[1] = iP071[1] + seg7;
    P072[1] = iP072[1] + seg7;
    P073[1] = iP073[1] + seg7;
    P074[1] = iP074[1] + seg7;

    P091[1] = iP091[1] + seg3;
    P092[1] = iP092[1] + seg3;
    P093[1] = iP093[1] + seg3;
    P094[1] = iP094[1] + seg3;
    P095[1] = iP095[1] + seg3;
    P122[1] = iP122[1] + seg3 * 1.5;

    P097[1] = iP097[1] + chomp;
    P098[1] = iP098[1] + chomp;
    P102[1] = iP102[1] + chomp;
    P110[1] = iP110[1] + chomp;
    P111[1] = iP111[1] + chomp;
    P121[1] = iP121[1] + chomp;
    P118[1] = iP118[1] + chomp;
    P119[1] = iP119[1] + chomp;

    gl.glPushMatrix();

    gl.glRotatef(pitch, 1.0, 0.0, 0.0);

    gl.glTranslatef(0.0, 0.0, 7000.0);

    gl.glRotatef(180.0, 0.0, 1.0, 0.0);

    gl.glEnable(GL.GL_CULL_FACE);
    Dolphin014();
    Dolphin010();
    Dolphin009();
    Dolphin012();
    Dolphin013();
    Dolphin006();
    Dolphin002();
    Dolphin001();
    Dolphin003();
    Dolphin015();
    Dolphin004();
    Dolphin005();
    Dolphin007();
    Dolphin008();
    Dolphin011();
    Dolphin016();
    gl.glDisable(GL.GL_CULL_FACE);

    gl.glPopMatrix();
    
}
} // class Dolphin





